function [dssEngine, pathtofile, obj ] = dssget(dssckt, dssobject, customcommands, cleanupFlag, quiteFlag, fname)
% dssget fucntion returns a circuit or an element/device in the circuit after
% simulation. If only one argument is provided, it returns the circuit
% object after simulation. If two arguments are provided, it returns the
% interested both interested object and the circuit object. 
% NOTICE: The outpur arguments' order is different from the previous case. 
% First argument now is the object of interest. Second argument is the 
% circuit object. The circuit object return can be used for further processing 
% or solving.
%
% Inputs:
%			dssckt: circuit object (from dssconversion function) or path to the main opendss file
%			dssobject: (optional) dss object or name of the device (e.g. 'Load.lo192')
% 
% Examples:  
%			c = dssconversion(c); 
%			dssObj = dssget(c);
%			[dssObj obj] = dssget(c,c.load(1));
%			[dssObj obj] = dssget(c,'transformer.tr1');

% Process inputs
if ~exist('customcommands','var') 
	customcommands = '';
end
cleanFlag_ = false;

if ~exist('quiteFlag','var') || isempty(quiteFlag)
    quiteFlag = 0;
end

% store current dir
cdir = pwd;

persistent dssObj;
persistent dssStartOK;
persistent dssText;
	
if(isstruct(dssckt) && isfield(dssckt,'circuit') && isa(dssckt.circuit,'dsscircuit'))
	if ~exist('fname','var') || isempty(fname)
		try
			circuitName = dssckt.circuit.Name;
		catch
			circuitName = 'tmp';
		end
	else
		circuitName = fname;
    end
    % add energy meter at substation
	dssckt = addEnergyMeter(dssckt);
	pathtofile = dsswrite(dssckt,circuitName,0,'tmp/dssget_tmp',customcommands);
	try
		cleanFlag_ = cleanupFlag;
	catch
		cleanFlag_ = false;
	end
elseif isa(dssckt,'char')
	pathtofile = dssckt;
elseif( isa(dssckt,'COM.OpendssEngine_dss') )
	if(~isempty(customcommands))
		warning('dssget:ignoringCustomCommands','Right now we don''t use custom commands except when exporting a model to a new file');
	end
	dssObj = dssckt;
else
	error('Invalid dssckt input. Must be a Opendss circuit (generated by dssconversion function) or path to main Opendss file.')
end

if ~exist('dssobject','var') || isempty(dssobject)
	wantObject = 0;
else
	wantObject = 1;
	% handle dssobject class in
	if ~isempty(strfind(class(dssobject),'dss'))
		objtype = class(dssobject);
		objname = dssobject.Name;
	elseif ischar(dssobject)
		% suppose input like: 'load.lo123'
		s = regexp(dssobject,'\.','split');
		if length(s) == 2
			objtype = s{1};
			objname = s{2};
		else
			error('Invalid input argument for dssobject name. Valid name example: ''load.lo123''. ');
		end
	else
		error('Invalid dssobject argument. Must be dssobject or name of the object');
	end
end

% Run Opendss simulation in Matlab
if(~isa(dssckt,'COM.OpendssEngine_dss'))
    if isempty(dssObj)
        [dssStartOK, dssObj, dssText] = dssStartup;
    else
        dssText.command = 'clear';
    end
	if dssStartOK
		np = which(pathtofile);
		if(~isempty(np))
			pathtofile = np;
		end
		dssText.command=['Compile "' pathtofile '"'];
		% Set up the interface variables
		ac=dssObj.ActiveCircuit;
		dssSolution=ac.Solution;

		% solve the circuit in snapshot mode if customcommands hasn't done it
		if isempty(strfind(lower(customcommands),'solve'))
			% Solve executes the solution for the present solution mode, which is "snapshot".
			dssText.command='CalcVoltageBases';
			dssText.command='Set mode="Snapshot"';
			dssText.command='set maxiterations=500';
			dssText.command='Set MaxControliter=500';
			dssText.command='set controlmode=static';
			dssText.command='solve mode=direct';
			%dssSolution.Solve;
            if ~quiteFlag
                dssText.command='show voltages LL Nodes';
                dssText.command='show powers kva elements';	
                dssText.command='show taps';
            end
		end
        
        if ~dssSolution.Converged 
            if dssSolution.MostIterationsDone < dssSolution.MaxIterations &&  dssSolution.ControlIterations == dssSolution.MaxControlIterations && ~dssSolution.ControlActionsDone
                warning('System converged but control devices did not converge (usually fine still) at hour: %d, sec: %4.0f \n',floor(dssSolution.dblHour),mod(dssSolution.dblHour*3600,3600));
            else
                cd(cdir);
                dssText.Command = ['cd "' cdir '"'];
                error('Solution doesn''t converge! Check your circuit again! Hour: %d, sec: %4.0f \n',floor(dssSolution.dblHour),mod(dssSolution.dblHour*3600,3600));
            end
        end
	else
		disp('dss Did Not Start. Check if Opendss is installed properly in your machine');
	end
	dssText.Command = ['cd "' cdir '"'];
    cd(cdir);
end

% get specific object out
if wantObject
	obj = getObject(dssObj,objtype,objname);
	fn = fieldnames(obj);
	val = [fn(4:end) get(obj,fn(4:end))'];
	val = val';
	f = str2func(objtype);
	
	obj = f(struct(val{:}));
else
	if(nargout >=2)
		try
			obj = getAllObjects(dssObj);
		catch
			obj = dssckt;
		end
	end
end

% Clean up
if cleanFlag_
	pause(1); % pause for a second to get data out of text files before removing the folder.
	[status, message, messageid] = rmdir('tmp/dssget_tmp','s');
	if status == 0
        disp('Could not remove tmp/dssget_tmp directory. Ignore this.');
	end
end

% go back to original dir
cd(cdir);
dssEngine = dssObj;

end

function obj = getObject(dssckt,objtype,objname)
% Get an object from Opendss ActiveCircuit

if(~isa(dssckt,'COM.OpendssEngine_dss'))
	error('must pass in an opendss circuit object');
else
	%active circuit
	ac = dssckt.ActiveCircuit;
end

% remove 'dss' from objtype string
if ~isempty(strfind(objtype,'dss'))
	idx = strfind(objtype,'dss');
	objtype(idx:idx+2) = '';
end

el = [objtype 's'];

try
	m = ac.(el);
catch
	error('Invalid object type. Element with given type does not exist in the circuit. Check your object type again.');
end
	
m.First;

for i=1:ac.(el).count
    if strcmpi( objname, m.Name)
        obj = m;
        return;
    end
    if((~m.Next)), error('Invalid object name. Inexplicable iterator failure. Check object name again.'); end
end

end

function o = getAllObjects(dssckt)
% Get all objects from Opendss ActiveCircuit

if(~isa(dssckt,'COM.OpendssEngine_dss'))
	error('must pass in an opendss circuit object');
end
%active circuit
ac = dssckt.ActiveCircuit;
o = struct();

types = intersect(strcat(dssckt.Classes,'s'),fieldnames(ac));
tmap = struct('SwtControls','switch');

for m = types';
	% convert to the field name for our output struct, mapping manually
	% when specified
	try
		pn = tmap.(m{1});
	catch
		pn = lower(m{1}(1:end-1));
	end
	% get the iterator for this kind of object
	m2 = m{1};
	m = ac.(m{1});
	% get a function handle to use to create objects
	try
		o_cl = str2func(['dss' lower(m2(1:end-1))]);
		o.(pn)(length(m.AllNames)) = o_cl();
	catch
		warning('dssget:unknownType','object type %s will not be converted to matlab class, because the class dss%s does not exist',m2,pn);
		continue;
	end
	% get the list of fieldnames, minus the iterator properties
	fn = fieldnames(m); fn = setdiff(fn,{'AllNames','First','Next'});
	% Convert all the objects to class form
	i = m.First;
	while(i)
		% get the property values
		val = get(m,fn);
		% group properties with fieldnames and pass them into the
		% constructor function
		val = [fn ; val];
		o.(pn)(i) = set(o.(pn)(i),val{:});
		% go to the next object
		i = m.Next;
	end
end

% Handle Busses
o.buslist.id = ac.AllBusNames;
ab = ac.ActiveBus;
for i=1:ac.NumBuses
	ac.SetActiveBusi(i-1);
	if(ab.Coorddefined)
		o.buslist.coord(i,:) = [ab.x ab.y];
	end
	o.buslist.basekV(i) = ab.kVBase;
end

% Get circuit voltage source; assume it's the _first_ Vsource
i = find(~cellfun(@isempty,strfind(ac.AllElementNames,'Vsource')),1);
if(~isempty(i))
	ac.CktElements(ac.AllElementNames{i});
	ace = ac.ActiveCktElement;
	o.circuit = dsscircuit();
	for i=ace.AllPropertyNames; i = i{1};
		o.circuit.(i) = ace.Properties(i).Val;
	end
end

end
